N, M = map(int, input().split()) #나무 갯수, 필요한 목재 양 입력
Array = list(map(int, input().split())) #나무들의 높이 입력

low, high = 0, max(Array) #나무길이의 최소 최대 정의
answer = 0 # 출력할 결과 변수

while low <= high:
    mid = (low + high) // 2 #중간 값으로 이진 탑색 시작
    wood = 0 # 목재 양
    
    for height in Array:
        if height > mid: #높이가 현재 자르려는 높이보다 클 경우만
            wood += height - mid # 목재양 추가
        
    if wood >= M:
        answer = mid  # 가능한 H일 때는 저장 후
        low = mid + 1  # 높이를 높힘
    else:
        high = mid - 1  # 불가능이면 높이를 낮춤

print(answer)


# 떨어진 나무
# 한 숲 속에 여러 나무가 있다. 각 나무의 높이가 주어지며, 
# 용사는 나무를 자를 때 원하는 높이 H를 넘는 부분을 자르려고 한다. 
# 만약 나무의 높이가 H 이하라면, 나무는 자르지 않는다.

# 용사는 일정량의 목재 M이 필요하다. 나무들을 자르고 남은 부분에서 얻는 목재의 양을 계산할 수 있는데, 
# 이때 자른 나무의 남은 부분(나무의 높이 - H)의 합이 바로 얻은 목재 양이다.

# 목재 양 M을 만족하면서도 자른 나무의 높이가 가능한 한 높도록 설정한 높이 H를 찾아야 한다.
# 주어진 나무의 높이와 원하는 높이 H를 기준으로 최대 목재의 양을 구하는 프로그램을 작성하라.

# 입력
# 첫 번째 줄에 정수 N (1 ≤ N ≤ 100,000)과 M (1 ≤ M ≤ 1,000,000,000)이 주어진다.
# 두 번째 줄에는 N개의 정수가 주어지며, 각 정수는 나무의 높이를 나타낸다. 나무의 높이는 1 이상 1,000,000 이하이다.

# 출력
# 나무를 자르고 나서 얻는 최대 목재의 양을 출력한다.

#For example:

#Input	                    Result
# 4 7                       15
# 20 15 10 17                 

# 5 10                      3
# 5 5 5 5 5            

# 3 12                      3
# 5 7 10     

